# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ReadAllActionsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ReadAllActionsRequest(genpy.Message):
  _md5sum = "234c9556feffd5cacf02fbbf59cc9f2a"
  _type = "kortex_driver/ReadAllActionsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RequestedActionType input

================================================================================
MSG: kortex_driver/RequestedActionType

uint32 action_type"""
  __slots__ = ['input']
  _slot_types = ['kortex_driver/RequestedActionType']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReadAllActionsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.input is None:
        self.input = kortex_driver.msg.RequestedActionType()
    else:
      self.input = kortex_driver.msg.RequestedActionType()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.input.action_type
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input is None:
        self.input = kortex_driver.msg.RequestedActionType()
      end = 0
      start = end
      end += 4
      (self.input.action_type,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.input.action_type
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input is None:
        self.input = kortex_driver.msg.RequestedActionType()
      end = 0
      start = end
      end += 4
      (self.input.action_type,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ReadAllActionsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ReadAllActionsResponse(genpy.Message):
  _md5sum = "72b381b30f62d44ab602daa8b1690b41"
  _type = "kortex_driver/ReadAllActionsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ActionList output

================================================================================
MSG: kortex_driver/ActionList

Action[] action_list
================================================================================
MSG: kortex_driver/Action

ActionHandle handle
string name
string application_data
Action_action_parameters oneof_action_parameters
================================================================================
MSG: kortex_driver/ActionHandle

uint32 identifier
uint32 action_type
uint32 permission
================================================================================
MSG: kortex_driver/Action_action_parameters

TwistCommand[] send_twist_command
WrenchCommand[] send_wrench_command
Base_JointSpeeds[] send_joint_speeds
ConstrainedPose[] reach_pose
ConstrainedJointAngles[] reach_joint_angles
uint32[] toggle_admittance_mode
Snapshot[] snapshot
SwitchControlMapping[] switch_control_mapping
uint32[] navigate_joints
uint32[] navigate_mappings
ChangeTwist[] change_twist
ChangeJointSpeeds[] change_joint_speeds
ChangeWrench[] change_wrench
EmergencyStop[] apply_emergency_stop
Faults[] clear_faults
Delay[] delay
ActionHandle[] execute_action
GripperCommand[] send_gripper_command
GpioCommand[] send_gpio_command
Base_Stop[] stop_action
PreComputedJointTrajectory[] play_pre_computed_trajectory
SequenceHandle[] execute_sequence
WaypointList[] execute_waypoint_list
================================================================================
MSG: kortex_driver/TwistCommand

uint32 reference_frame
Twist twist
uint32 duration
================================================================================
MSG: kortex_driver/Twist

float32 linear_x
float32 linear_y
float32 linear_z
float32 angular_x
float32 angular_y
float32 angular_z
================================================================================
MSG: kortex_driver/WrenchCommand

uint32 reference_frame
uint32 mode
Wrench wrench
uint32 duration
================================================================================
MSG: kortex_driver/Wrench

float32 force_x
float32 force_y
float32 force_z
float32 torque_x
float32 torque_y
float32 torque_z
================================================================================
MSG: kortex_driver/Base_JointSpeeds

JointSpeed[] joint_speeds
uint32 duration
================================================================================
MSG: kortex_driver/JointSpeed

uint32 joint_identifier
float32 value
uint32 duration
================================================================================
MSG: kortex_driver/ConstrainedPose

Pose target_pose
CartesianTrajectoryConstraint constraint
================================================================================
MSG: kortex_driver/Pose

float32 x
float32 y
float32 z
float32 theta_x
float32 theta_y
float32 theta_z
================================================================================
MSG: kortex_driver/CartesianTrajectoryConstraint

CartesianTrajectoryConstraint_type oneof_type
================================================================================
MSG: kortex_driver/CartesianTrajectoryConstraint_type

CartesianSpeed[] speed
uint32[] duration
================================================================================
MSG: kortex_driver/CartesianSpeed

float32 translation
float32 orientation
================================================================================
MSG: kortex_driver/ConstrainedJointAngles

JointAngles joint_angles
JointTrajectoryConstraint constraint
================================================================================
MSG: kortex_driver/JointAngles

JointAngle[] joint_angles
================================================================================
MSG: kortex_driver/JointAngle

uint32 joint_identifier
float32 value
================================================================================
MSG: kortex_driver/JointTrajectoryConstraint

uint32 type
float32 value
================================================================================
MSG: kortex_driver/Snapshot

uint32 snapshot_type
================================================================================
MSG: kortex_driver/SwitchControlMapping

uint32 controller_identifier
MapGroupHandle map_group_handle
MapHandle map_handle
================================================================================
MSG: kortex_driver/MapGroupHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/MapHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/ChangeTwist

float32 linear
float32 angular
================================================================================
MSG: kortex_driver/ChangeJointSpeeds

Base_JointSpeeds joint_speeds
================================================================================
MSG: kortex_driver/ChangeWrench

float32 force
float32 torque
================================================================================
MSG: kortex_driver/EmergencyStop

================================================================================
MSG: kortex_driver/Faults

================================================================================
MSG: kortex_driver/Delay

uint32 duration
================================================================================
MSG: kortex_driver/GripperCommand

uint32 mode
Gripper gripper
uint32 duration
================================================================================
MSG: kortex_driver/Gripper

Finger[] finger
================================================================================
MSG: kortex_driver/Finger

uint32 finger_identifier
float32 value
================================================================================
MSG: kortex_driver/GpioCommand

uint32 port_identifier
uint32 pin_identifier
uint32 action
uint32 period
================================================================================
MSG: kortex_driver/Base_Stop

================================================================================
MSG: kortex_driver/PreComputedJointTrajectory

uint32 mode
PreComputedJointTrajectoryElement[] trajectory_elements
================================================================================
MSG: kortex_driver/PreComputedJointTrajectoryElement

float32[] joint_angles
float32[] joint_speeds
float32[] joint_accelerations
float32 time_from_start
================================================================================
MSG: kortex_driver/SequenceHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/WaypointList

Waypoint[] waypoints
float32 duration
bool use_optimal_blending
================================================================================
MSG: kortex_driver/Waypoint

string name
Waypoint_type_of_waypoint oneof_type_of_waypoint
================================================================================
MSG: kortex_driver/Waypoint_type_of_waypoint

AngularWaypoint[] angular_waypoint
CartesianWaypoint[] cartesian_waypoint
================================================================================
MSG: kortex_driver/AngularWaypoint

float32[] angles
float32[] maximum_velocities
float32 duration
================================================================================
MSG: kortex_driver/CartesianWaypoint

Pose pose
uint32 reference_frame
float32 maximum_linear_velocity
float32 maximum_angular_velocity
float32 blending_radius"""
  __slots__ = ['output']
  _slot_types = ['kortex_driver/ActionList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       output

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReadAllActionsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.output is None:
        self.output = kortex_driver.msg.ActionList()
    else:
      self.output = kortex_driver.msg.ActionList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.output.action_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.output.action_list:
        _v1 = val1.handle
        _x = _v1
        buff.write(_get_struct_3I().pack(_x.identifier, _x.action_type, _x.permission))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.application_data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v2 = val1.oneof_action_parameters
        length = len(_v2.send_twist_command)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.send_twist_command:
          _x = val3.reference_frame
          buff.write(_get_struct_I().pack(_x))
          _v3 = val3.twist
          _x = _v3
          buff.write(_get_struct_6f().pack(_x.linear_x, _x.linear_y, _x.linear_z, _x.angular_x, _x.angular_y, _x.angular_z))
          _x = val3.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v2.send_wrench_command)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.send_wrench_command:
          _x = val3
          buff.write(_get_struct_2I().pack(_x.reference_frame, _x.mode))
          _v4 = val3.wrench
          _x = _v4
          buff.write(_get_struct_6f().pack(_x.force_x, _x.force_y, _x.force_z, _x.torque_x, _x.torque_y, _x.torque_z))
          _x = val3.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v2.send_joint_speeds)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.send_joint_speeds:
          length = len(val3.joint_speeds)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_speeds:
            _x = val4
            buff.write(_get_struct_IfI().pack(_x.joint_identifier, _x.value, _x.duration))
          _x = val3.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v2.reach_pose)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.reach_pose:
          _v5 = val3.target_pose
          _x = _v5
          buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
          _v6 = val3.constraint
          _v7 = _v6.oneof_type
          length = len(_v7.speed)
          buff.write(_struct_I.pack(length))
          for val6 in _v7.speed:
            _x = val6
            buff.write(_get_struct_2f().pack(_x.translation, _x.orientation))
          length = len(_v7.duration)
          buff.write(_struct_I.pack(length))
          pattern = '<%sI'%length
          buff.write(struct.Struct(pattern).pack(*_v7.duration))
        length = len(_v2.reach_joint_angles)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.reach_joint_angles:
          _v8 = val3.joint_angles
          length = len(_v8.joint_angles)
          buff.write(_struct_I.pack(length))
          for val5 in _v8.joint_angles:
            _x = val5
            buff.write(_get_struct_If().pack(_x.joint_identifier, _x.value))
          _v9 = val3.constraint
          _x = _v9
          buff.write(_get_struct_If().pack(_x.type, _x.value))
        length = len(_v2.toggle_admittance_mode)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v2.toggle_admittance_mode))
        length = len(_v2.snapshot)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.snapshot:
          _x = val3.snapshot_type
          buff.write(_get_struct_I().pack(_x))
        length = len(_v2.switch_control_mapping)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.switch_control_mapping:
          _x = val3.controller_identifier
          buff.write(_get_struct_I().pack(_x))
          _v10 = val3.map_group_handle
          _x = _v10
          buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
          _v11 = val3.map_handle
          _x = _v11
          buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        length = len(_v2.navigate_joints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v2.navigate_joints))
        length = len(_v2.navigate_mappings)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v2.navigate_mappings))
        length = len(_v2.change_twist)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.change_twist:
          _x = val3
          buff.write(_get_struct_2f().pack(_x.linear, _x.angular))
        length = len(_v2.change_joint_speeds)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.change_joint_speeds:
          _v12 = val3.joint_speeds
          length = len(_v12.joint_speeds)
          buff.write(_struct_I.pack(length))
          for val5 in _v12.joint_speeds:
            _x = val5
            buff.write(_get_struct_IfI().pack(_x.joint_identifier, _x.value, _x.duration))
          _x = _v12.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v2.change_wrench)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.change_wrench:
          _x = val3
          buff.write(_get_struct_2f().pack(_x.force, _x.torque))
        length = len(_v2.apply_emergency_stop)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.apply_emergency_stop:
          pass
        length = len(_v2.clear_faults)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.clear_faults:
          pass
        length = len(_v2.delay)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.delay:
          _x = val3.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v2.execute_action)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.execute_action:
          _x = val3
          buff.write(_get_struct_3I().pack(_x.identifier, _x.action_type, _x.permission))
        length = len(_v2.send_gripper_command)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.send_gripper_command:
          _x = val3.mode
          buff.write(_get_struct_I().pack(_x))
          _v13 = val3.gripper
          length = len(_v13.finger)
          buff.write(_struct_I.pack(length))
          for val5 in _v13.finger:
            _x = val5
            buff.write(_get_struct_If().pack(_x.finger_identifier, _x.value))
          _x = val3.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v2.send_gpio_command)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.send_gpio_command:
          _x = val3
          buff.write(_get_struct_4I().pack(_x.port_identifier, _x.pin_identifier, _x.action, _x.period))
        length = len(_v2.stop_action)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.stop_action:
          pass
        length = len(_v2.play_pre_computed_trajectory)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.play_pre_computed_trajectory:
          _x = val3.mode
          buff.write(_get_struct_I().pack(_x))
          length = len(val3.trajectory_elements)
          buff.write(_struct_I.pack(length))
          for val4 in val3.trajectory_elements:
            length = len(val4.joint_angles)
            buff.write(_struct_I.pack(length))
            pattern = '<%sf'%length
            buff.write(struct.Struct(pattern).pack(*val4.joint_angles))
            length = len(val4.joint_speeds)
            buff.write(_struct_I.pack(length))
            pattern = '<%sf'%length
            buff.write(struct.Struct(pattern).pack(*val4.joint_speeds))
            length = len(val4.joint_accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sf'%length
            buff.write(struct.Struct(pattern).pack(*val4.joint_accelerations))
            _x = val4.time_from_start
            buff.write(_get_struct_f().pack(_x))
        length = len(_v2.execute_sequence)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.execute_sequence:
          _x = val3
          buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        length = len(_v2.execute_waypoint_list)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.execute_waypoint_list:
          length = len(val3.waypoints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.waypoints:
            _x = val4.name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v14 = val4.oneof_type_of_waypoint
            length = len(_v14.angular_waypoint)
            buff.write(_struct_I.pack(length))
            for val6 in _v14.angular_waypoint:
              length = len(val6.angles)
              buff.write(_struct_I.pack(length))
              pattern = '<%sf'%length
              buff.write(struct.Struct(pattern).pack(*val6.angles))
              length = len(val6.maximum_velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sf'%length
              buff.write(struct.Struct(pattern).pack(*val6.maximum_velocities))
              _x = val6.duration
              buff.write(_get_struct_f().pack(_x))
            length = len(_v14.cartesian_waypoint)
            buff.write(_struct_I.pack(length))
            for val6 in _v14.cartesian_waypoint:
              _v15 = val6.pose
              _x = _v15
              buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
              _x = val6
              buff.write(_get_struct_I3f().pack(_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius))
          _x = val3
          buff.write(_get_struct_fB().pack(_x.duration, _x.use_optimal_blending))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.output is None:
        self.output = kortex_driver.msg.ActionList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output.action_list = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Action()
        _v16 = val1.handle
        _x = _v16
        start = end
        end += 12
        (_x.identifier, _x.action_type, _x.permission,) = _get_struct_3I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.application_data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.application_data = str[start:end]
        _v17 = val1.oneof_action_parameters
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.send_twist_command = []
        for i in range(0, length):
          val3 = kortex_driver.msg.TwistCommand()
          start = end
          end += 4
          (val3.reference_frame,) = _get_struct_I().unpack(str[start:end])
          _v18 = val3.twist
          _x = _v18
          start = end
          end += 24
          (_x.linear_x, _x.linear_y, _x.linear_z, _x.angular_x, _x.angular_y, _x.angular_z,) = _get_struct_6f().unpack(str[start:end])
          start = end
          end += 4
          (val3.duration,) = _get_struct_I().unpack(str[start:end])
          _v17.send_twist_command.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.send_wrench_command = []
        for i in range(0, length):
          val3 = kortex_driver.msg.WrenchCommand()
          _x = val3
          start = end
          end += 8
          (_x.reference_frame, _x.mode,) = _get_struct_2I().unpack(str[start:end])
          _v19 = val3.wrench
          _x = _v19
          start = end
          end += 24
          (_x.force_x, _x.force_y, _x.force_z, _x.torque_x, _x.torque_y, _x.torque_z,) = _get_struct_6f().unpack(str[start:end])
          start = end
          end += 4
          (val3.duration,) = _get_struct_I().unpack(str[start:end])
          _v17.send_wrench_command.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.send_joint_speeds = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Base_JointSpeeds()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_speeds = []
          for i in range(0, length):
            val4 = kortex_driver.msg.JointSpeed()
            _x = val4
            start = end
            end += 12
            (_x.joint_identifier, _x.value, _x.duration,) = _get_struct_IfI().unpack(str[start:end])
            val3.joint_speeds.append(val4)
          start = end
          end += 4
          (val3.duration,) = _get_struct_I().unpack(str[start:end])
          _v17.send_joint_speeds.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.reach_pose = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ConstrainedPose()
          _v20 = val3.target_pose
          _x = _v20
          start = end
          end += 24
          (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
          _v21 = val3.constraint
          _v22 = _v21.oneof_type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v22.speed = []
          for i in range(0, length):
            val6 = kortex_driver.msg.CartesianSpeed()
            _x = val6
            start = end
            end += 8
            (_x.translation, _x.orientation,) = _get_struct_2f().unpack(str[start:end])
            _v22.speed.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sI'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v22.duration = s.unpack(str[start:end])
          _v17.reach_pose.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.reach_joint_angles = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ConstrainedJointAngles()
          _v23 = val3.joint_angles
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v23.joint_angles = []
          for i in range(0, length):
            val5 = kortex_driver.msg.JointAngle()
            _x = val5
            start = end
            end += 8
            (_x.joint_identifier, _x.value,) = _get_struct_If().unpack(str[start:end])
            _v23.joint_angles.append(val5)
          _v24 = val3.constraint
          _x = _v24
          start = end
          end += 8
          (_x.type, _x.value,) = _get_struct_If().unpack(str[start:end])
          _v17.reach_joint_angles.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v17.toggle_admittance_mode = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.snapshot = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Snapshot()
          start = end
          end += 4
          (val3.snapshot_type,) = _get_struct_I().unpack(str[start:end])
          _v17.snapshot.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.switch_control_mapping = []
        for i in range(0, length):
          val3 = kortex_driver.msg.SwitchControlMapping()
          start = end
          end += 4
          (val3.controller_identifier,) = _get_struct_I().unpack(str[start:end])
          _v25 = val3.map_group_handle
          _x = _v25
          start = end
          end += 8
          (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
          _v26 = val3.map_handle
          _x = _v26
          start = end
          end += 8
          (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
          _v17.switch_control_mapping.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v17.navigate_joints = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v17.navigate_mappings = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.change_twist = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ChangeTwist()
          _x = val3
          start = end
          end += 8
          (_x.linear, _x.angular,) = _get_struct_2f().unpack(str[start:end])
          _v17.change_twist.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.change_joint_speeds = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ChangeJointSpeeds()
          _v27 = val3.joint_speeds
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v27.joint_speeds = []
          for i in range(0, length):
            val5 = kortex_driver.msg.JointSpeed()
            _x = val5
            start = end
            end += 12
            (_x.joint_identifier, _x.value, _x.duration,) = _get_struct_IfI().unpack(str[start:end])
            _v27.joint_speeds.append(val5)
          start = end
          end += 4
          (_v27.duration,) = _get_struct_I().unpack(str[start:end])
          _v17.change_joint_speeds.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.change_wrench = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ChangeWrench()
          _x = val3
          start = end
          end += 8
          (_x.force, _x.torque,) = _get_struct_2f().unpack(str[start:end])
          _v17.change_wrench.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.apply_emergency_stop = []
        for i in range(0, length):
          val3 = kortex_driver.msg.EmergencyStop()
          _v17.apply_emergency_stop.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.clear_faults = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Faults()
          _v17.clear_faults.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.delay = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Delay()
          start = end
          end += 4
          (val3.duration,) = _get_struct_I().unpack(str[start:end])
          _v17.delay.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.execute_action = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ActionHandle()
          _x = val3
          start = end
          end += 12
          (_x.identifier, _x.action_type, _x.permission,) = _get_struct_3I().unpack(str[start:end])
          _v17.execute_action.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.send_gripper_command = []
        for i in range(0, length):
          val3 = kortex_driver.msg.GripperCommand()
          start = end
          end += 4
          (val3.mode,) = _get_struct_I().unpack(str[start:end])
          _v28 = val3.gripper
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v28.finger = []
          for i in range(0, length):
            val5 = kortex_driver.msg.Finger()
            _x = val5
            start = end
            end += 8
            (_x.finger_identifier, _x.value,) = _get_struct_If().unpack(str[start:end])
            _v28.finger.append(val5)
          start = end
          end += 4
          (val3.duration,) = _get_struct_I().unpack(str[start:end])
          _v17.send_gripper_command.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.send_gpio_command = []
        for i in range(0, length):
          val3 = kortex_driver.msg.GpioCommand()
          _x = val3
          start = end
          end += 16
          (_x.port_identifier, _x.pin_identifier, _x.action, _x.period,) = _get_struct_4I().unpack(str[start:end])
          _v17.send_gpio_command.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.stop_action = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Base_Stop()
          _v17.stop_action.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.play_pre_computed_trajectory = []
        for i in range(0, length):
          val3 = kortex_driver.msg.PreComputedJointTrajectory()
          start = end
          end += 4
          (val3.mode,) = _get_struct_I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.trajectory_elements = []
          for i in range(0, length):
            val4 = kortex_driver.msg.PreComputedJointTrajectoryElement()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sf'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.joint_angles = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sf'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.joint_speeds = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sf'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.joint_accelerations = s.unpack(str[start:end])
            start = end
            end += 4
            (val4.time_from_start,) = _get_struct_f().unpack(str[start:end])
            val3.trajectory_elements.append(val4)
          _v17.play_pre_computed_trajectory.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.execute_sequence = []
        for i in range(0, length):
          val3 = kortex_driver.msg.SequenceHandle()
          _x = val3
          start = end
          end += 8
          (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
          _v17.execute_sequence.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.execute_waypoint_list = []
        for i in range(0, length):
          val3 = kortex_driver.msg.WaypointList()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.waypoints = []
          for i in range(0, length):
            val4 = kortex_driver.msg.Waypoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.name = str[start:end]
            _v29 = val4.oneof_type_of_waypoint
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v29.angular_waypoint = []
            for i in range(0, length):
              val6 = kortex_driver.msg.AngularWaypoint()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sf'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val6.angles = s.unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sf'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val6.maximum_velocities = s.unpack(str[start:end])
              start = end
              end += 4
              (val6.duration,) = _get_struct_f().unpack(str[start:end])
              _v29.angular_waypoint.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v29.cartesian_waypoint = []
            for i in range(0, length):
              val6 = kortex_driver.msg.CartesianWaypoint()
              _v30 = val6.pose
              _x = _v30
              start = end
              end += 24
              (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
              _x = val6
              start = end
              end += 16
              (_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius,) = _get_struct_I3f().unpack(str[start:end])
              _v29.cartesian_waypoint.append(val6)
            val3.waypoints.append(val4)
          _x = val3
          start = end
          end += 5
          (_x.duration, _x.use_optimal_blending,) = _get_struct_fB().unpack(str[start:end])
          val3.use_optimal_blending = bool(val3.use_optimal_blending)
          _v17.execute_waypoint_list.append(val3)
        self.output.action_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.output.action_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.output.action_list:
        _v31 = val1.handle
        _x = _v31
        buff.write(_get_struct_3I().pack(_x.identifier, _x.action_type, _x.permission))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.application_data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v32 = val1.oneof_action_parameters
        length = len(_v32.send_twist_command)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.send_twist_command:
          _x = val3.reference_frame
          buff.write(_get_struct_I().pack(_x))
          _v33 = val3.twist
          _x = _v33
          buff.write(_get_struct_6f().pack(_x.linear_x, _x.linear_y, _x.linear_z, _x.angular_x, _x.angular_y, _x.angular_z))
          _x = val3.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v32.send_wrench_command)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.send_wrench_command:
          _x = val3
          buff.write(_get_struct_2I().pack(_x.reference_frame, _x.mode))
          _v34 = val3.wrench
          _x = _v34
          buff.write(_get_struct_6f().pack(_x.force_x, _x.force_y, _x.force_z, _x.torque_x, _x.torque_y, _x.torque_z))
          _x = val3.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v32.send_joint_speeds)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.send_joint_speeds:
          length = len(val3.joint_speeds)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_speeds:
            _x = val4
            buff.write(_get_struct_IfI().pack(_x.joint_identifier, _x.value, _x.duration))
          _x = val3.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v32.reach_pose)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.reach_pose:
          _v35 = val3.target_pose
          _x = _v35
          buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
          _v36 = val3.constraint
          _v37 = _v36.oneof_type
          length = len(_v37.speed)
          buff.write(_struct_I.pack(length))
          for val6 in _v37.speed:
            _x = val6
            buff.write(_get_struct_2f().pack(_x.translation, _x.orientation))
          length = len(_v37.duration)
          buff.write(_struct_I.pack(length))
          pattern = '<%sI'%length
          buff.write(_v37.duration.tostring())
        length = len(_v32.reach_joint_angles)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.reach_joint_angles:
          _v38 = val3.joint_angles
          length = len(_v38.joint_angles)
          buff.write(_struct_I.pack(length))
          for val5 in _v38.joint_angles:
            _x = val5
            buff.write(_get_struct_If().pack(_x.joint_identifier, _x.value))
          _v39 = val3.constraint
          _x = _v39
          buff.write(_get_struct_If().pack(_x.type, _x.value))
        length = len(_v32.toggle_admittance_mode)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v32.toggle_admittance_mode.tostring())
        length = len(_v32.snapshot)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.snapshot:
          _x = val3.snapshot_type
          buff.write(_get_struct_I().pack(_x))
        length = len(_v32.switch_control_mapping)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.switch_control_mapping:
          _x = val3.controller_identifier
          buff.write(_get_struct_I().pack(_x))
          _v40 = val3.map_group_handle
          _x = _v40
          buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
          _v41 = val3.map_handle
          _x = _v41
          buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        length = len(_v32.navigate_joints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v32.navigate_joints.tostring())
        length = len(_v32.navigate_mappings)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v32.navigate_mappings.tostring())
        length = len(_v32.change_twist)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.change_twist:
          _x = val3
          buff.write(_get_struct_2f().pack(_x.linear, _x.angular))
        length = len(_v32.change_joint_speeds)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.change_joint_speeds:
          _v42 = val3.joint_speeds
          length = len(_v42.joint_speeds)
          buff.write(_struct_I.pack(length))
          for val5 in _v42.joint_speeds:
            _x = val5
            buff.write(_get_struct_IfI().pack(_x.joint_identifier, _x.value, _x.duration))
          _x = _v42.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v32.change_wrench)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.change_wrench:
          _x = val3
          buff.write(_get_struct_2f().pack(_x.force, _x.torque))
        length = len(_v32.apply_emergency_stop)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.apply_emergency_stop:
          pass
        length = len(_v32.clear_faults)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.clear_faults:
          pass
        length = len(_v32.delay)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.delay:
          _x = val3.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v32.execute_action)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.execute_action:
          _x = val3
          buff.write(_get_struct_3I().pack(_x.identifier, _x.action_type, _x.permission))
        length = len(_v32.send_gripper_command)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.send_gripper_command:
          _x = val3.mode
          buff.write(_get_struct_I().pack(_x))
          _v43 = val3.gripper
          length = len(_v43.finger)
          buff.write(_struct_I.pack(length))
          for val5 in _v43.finger:
            _x = val5
            buff.write(_get_struct_If().pack(_x.finger_identifier, _x.value))
          _x = val3.duration
          buff.write(_get_struct_I().pack(_x))
        length = len(_v32.send_gpio_command)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.send_gpio_command:
          _x = val3
          buff.write(_get_struct_4I().pack(_x.port_identifier, _x.pin_identifier, _x.action, _x.period))
        length = len(_v32.stop_action)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.stop_action:
          pass
        length = len(_v32.play_pre_computed_trajectory)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.play_pre_computed_trajectory:
          _x = val3.mode
          buff.write(_get_struct_I().pack(_x))
          length = len(val3.trajectory_elements)
          buff.write(_struct_I.pack(length))
          for val4 in val3.trajectory_elements:
            length = len(val4.joint_angles)
            buff.write(_struct_I.pack(length))
            pattern = '<%sf'%length
            buff.write(val4.joint_angles.tostring())
            length = len(val4.joint_speeds)
            buff.write(_struct_I.pack(length))
            pattern = '<%sf'%length
            buff.write(val4.joint_speeds.tostring())
            length = len(val4.joint_accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sf'%length
            buff.write(val4.joint_accelerations.tostring())
            _x = val4.time_from_start
            buff.write(_get_struct_f().pack(_x))
        length = len(_v32.execute_sequence)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.execute_sequence:
          _x = val3
          buff.write(_get_struct_2I().pack(_x.identifier, _x.permission))
        length = len(_v32.execute_waypoint_list)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.execute_waypoint_list:
          length = len(val3.waypoints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.waypoints:
            _x = val4.name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v44 = val4.oneof_type_of_waypoint
            length = len(_v44.angular_waypoint)
            buff.write(_struct_I.pack(length))
            for val6 in _v44.angular_waypoint:
              length = len(val6.angles)
              buff.write(_struct_I.pack(length))
              pattern = '<%sf'%length
              buff.write(val6.angles.tostring())
              length = len(val6.maximum_velocities)
              buff.write(_struct_I.pack(length))
              pattern = '<%sf'%length
              buff.write(val6.maximum_velocities.tostring())
              _x = val6.duration
              buff.write(_get_struct_f().pack(_x))
            length = len(_v44.cartesian_waypoint)
            buff.write(_struct_I.pack(length))
            for val6 in _v44.cartesian_waypoint:
              _v45 = val6.pose
              _x = _v45
              buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
              _x = val6
              buff.write(_get_struct_I3f().pack(_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius))
          _x = val3
          buff.write(_get_struct_fB().pack(_x.duration, _x.use_optimal_blending))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.output is None:
        self.output = kortex_driver.msg.ActionList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output.action_list = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Action()
        _v46 = val1.handle
        _x = _v46
        start = end
        end += 12
        (_x.identifier, _x.action_type, _x.permission,) = _get_struct_3I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.application_data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.application_data = str[start:end]
        _v47 = val1.oneof_action_parameters
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.send_twist_command = []
        for i in range(0, length):
          val3 = kortex_driver.msg.TwistCommand()
          start = end
          end += 4
          (val3.reference_frame,) = _get_struct_I().unpack(str[start:end])
          _v48 = val3.twist
          _x = _v48
          start = end
          end += 24
          (_x.linear_x, _x.linear_y, _x.linear_z, _x.angular_x, _x.angular_y, _x.angular_z,) = _get_struct_6f().unpack(str[start:end])
          start = end
          end += 4
          (val3.duration,) = _get_struct_I().unpack(str[start:end])
          _v47.send_twist_command.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.send_wrench_command = []
        for i in range(0, length):
          val3 = kortex_driver.msg.WrenchCommand()
          _x = val3
          start = end
          end += 8
          (_x.reference_frame, _x.mode,) = _get_struct_2I().unpack(str[start:end])
          _v49 = val3.wrench
          _x = _v49
          start = end
          end += 24
          (_x.force_x, _x.force_y, _x.force_z, _x.torque_x, _x.torque_y, _x.torque_z,) = _get_struct_6f().unpack(str[start:end])
          start = end
          end += 4
          (val3.duration,) = _get_struct_I().unpack(str[start:end])
          _v47.send_wrench_command.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.send_joint_speeds = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Base_JointSpeeds()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_speeds = []
          for i in range(0, length):
            val4 = kortex_driver.msg.JointSpeed()
            _x = val4
            start = end
            end += 12
            (_x.joint_identifier, _x.value, _x.duration,) = _get_struct_IfI().unpack(str[start:end])
            val3.joint_speeds.append(val4)
          start = end
          end += 4
          (val3.duration,) = _get_struct_I().unpack(str[start:end])
          _v47.send_joint_speeds.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.reach_pose = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ConstrainedPose()
          _v50 = val3.target_pose
          _x = _v50
          start = end
          end += 24
          (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
          _v51 = val3.constraint
          _v52 = _v51.oneof_type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v52.speed = []
          for i in range(0, length):
            val6 = kortex_driver.msg.CartesianSpeed()
            _x = val6
            start = end
            end += 8
            (_x.translation, _x.orientation,) = _get_struct_2f().unpack(str[start:end])
            _v52.speed.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sI'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          _v52.duration = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
          _v47.reach_pose.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.reach_joint_angles = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ConstrainedJointAngles()
          _v53 = val3.joint_angles
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v53.joint_angles = []
          for i in range(0, length):
            val5 = kortex_driver.msg.JointAngle()
            _x = val5
            start = end
            end += 8
            (_x.joint_identifier, _x.value,) = _get_struct_If().unpack(str[start:end])
            _v53.joint_angles.append(val5)
          _v54 = val3.constraint
          _x = _v54
          start = end
          end += 8
          (_x.type, _x.value,) = _get_struct_If().unpack(str[start:end])
          _v47.reach_joint_angles.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v47.toggle_admittance_mode = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.snapshot = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Snapshot()
          start = end
          end += 4
          (val3.snapshot_type,) = _get_struct_I().unpack(str[start:end])
          _v47.snapshot.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.switch_control_mapping = []
        for i in range(0, length):
          val3 = kortex_driver.msg.SwitchControlMapping()
          start = end
          end += 4
          (val3.controller_identifier,) = _get_struct_I().unpack(str[start:end])
          _v55 = val3.map_group_handle
          _x = _v55
          start = end
          end += 8
          (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
          _v56 = val3.map_handle
          _x = _v56
          start = end
          end += 8
          (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
          _v47.switch_control_mapping.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v47.navigate_joints = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v47.navigate_mappings = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.change_twist = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ChangeTwist()
          _x = val3
          start = end
          end += 8
          (_x.linear, _x.angular,) = _get_struct_2f().unpack(str[start:end])
          _v47.change_twist.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.change_joint_speeds = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ChangeJointSpeeds()
          _v57 = val3.joint_speeds
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v57.joint_speeds = []
          for i in range(0, length):
            val5 = kortex_driver.msg.JointSpeed()
            _x = val5
            start = end
            end += 12
            (_x.joint_identifier, _x.value, _x.duration,) = _get_struct_IfI().unpack(str[start:end])
            _v57.joint_speeds.append(val5)
          start = end
          end += 4
          (_v57.duration,) = _get_struct_I().unpack(str[start:end])
          _v47.change_joint_speeds.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.change_wrench = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ChangeWrench()
          _x = val3
          start = end
          end += 8
          (_x.force, _x.torque,) = _get_struct_2f().unpack(str[start:end])
          _v47.change_wrench.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.apply_emergency_stop = []
        for i in range(0, length):
          val3 = kortex_driver.msg.EmergencyStop()
          _v47.apply_emergency_stop.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.clear_faults = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Faults()
          _v47.clear_faults.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.delay = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Delay()
          start = end
          end += 4
          (val3.duration,) = _get_struct_I().unpack(str[start:end])
          _v47.delay.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.execute_action = []
        for i in range(0, length):
          val3 = kortex_driver.msg.ActionHandle()
          _x = val3
          start = end
          end += 12
          (_x.identifier, _x.action_type, _x.permission,) = _get_struct_3I().unpack(str[start:end])
          _v47.execute_action.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.send_gripper_command = []
        for i in range(0, length):
          val3 = kortex_driver.msg.GripperCommand()
          start = end
          end += 4
          (val3.mode,) = _get_struct_I().unpack(str[start:end])
          _v58 = val3.gripper
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v58.finger = []
          for i in range(0, length):
            val5 = kortex_driver.msg.Finger()
            _x = val5
            start = end
            end += 8
            (_x.finger_identifier, _x.value,) = _get_struct_If().unpack(str[start:end])
            _v58.finger.append(val5)
          start = end
          end += 4
          (val3.duration,) = _get_struct_I().unpack(str[start:end])
          _v47.send_gripper_command.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.send_gpio_command = []
        for i in range(0, length):
          val3 = kortex_driver.msg.GpioCommand()
          _x = val3
          start = end
          end += 16
          (_x.port_identifier, _x.pin_identifier, _x.action, _x.period,) = _get_struct_4I().unpack(str[start:end])
          _v47.send_gpio_command.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.stop_action = []
        for i in range(0, length):
          val3 = kortex_driver.msg.Base_Stop()
          _v47.stop_action.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.play_pre_computed_trajectory = []
        for i in range(0, length):
          val3 = kortex_driver.msg.PreComputedJointTrajectory()
          start = end
          end += 4
          (val3.mode,) = _get_struct_I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.trajectory_elements = []
          for i in range(0, length):
            val4 = kortex_driver.msg.PreComputedJointTrajectoryElement()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sf'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sf'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.joint_speeds = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sf'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.joint_accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
            start = end
            end += 4
            (val4.time_from_start,) = _get_struct_f().unpack(str[start:end])
            val3.trajectory_elements.append(val4)
          _v47.play_pre_computed_trajectory.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.execute_sequence = []
        for i in range(0, length):
          val3 = kortex_driver.msg.SequenceHandle()
          _x = val3
          start = end
          end += 8
          (_x.identifier, _x.permission,) = _get_struct_2I().unpack(str[start:end])
          _v47.execute_sequence.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.execute_waypoint_list = []
        for i in range(0, length):
          val3 = kortex_driver.msg.WaypointList()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.waypoints = []
          for i in range(0, length):
            val4 = kortex_driver.msg.Waypoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.name = str[start:end]
            _v59 = val4.oneof_type_of_waypoint
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v59.angular_waypoint = []
            for i in range(0, length):
              val6 = kortex_driver.msg.AngularWaypoint()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sf'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val6.angles = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sf'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val6.maximum_velocities = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
              start = end
              end += 4
              (val6.duration,) = _get_struct_f().unpack(str[start:end])
              _v59.angular_waypoint.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v59.cartesian_waypoint = []
            for i in range(0, length):
              val6 = kortex_driver.msg.CartesianWaypoint()
              _v60 = val6.pose
              _x = _v60
              start = end
              end += 24
              (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
              _x = val6
              start = end
              end += 16
              (_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius,) = _get_struct_I3f().unpack(str[start:end])
              _v59.cartesian_waypoint.append(val6)
            val3.waypoints.append(val4)
          _x = val3
          start = end
          end += 5
          (_x.duration, _x.use_optimal_blending,) = _get_struct_fB().unpack(str[start:end])
          val3.use_optimal_blending = bool(val3.use_optimal_blending)
          _v47.execute_waypoint_list.append(val3)
        self.output.action_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4I = None
def _get_struct_4I():
    global _struct_4I
    if _struct_4I is None:
        _struct_4I = struct.Struct("<4I")
    return _struct_4I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_I3f = None
def _get_struct_I3f():
    global _struct_I3f
    if _struct_I3f is None:
        _struct_I3f = struct.Struct("<I3f")
    return _struct_I3f
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
_struct_IfI = None
def _get_struct_IfI():
    global _struct_IfI
    if _struct_IfI is None:
        _struct_IfI = struct.Struct("<IfI")
    return _struct_IfI
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
class ReadAllActions(object):
  _type          = 'kortex_driver/ReadAllActions'
  _md5sum = '19862e60bc6b5a5249992cb7e602ec0f'
  _request_class  = ReadAllActionsRequest
  _response_class = ReadAllActionsResponse
