# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ValidateWaypointListRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ValidateWaypointListRequest(genpy.Message):
  _md5sum = "e9c355de078272f6acdb19f10ac9518d"
  _type = "kortex_driver/ValidateWaypointListRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """WaypointList input

================================================================================
MSG: kortex_driver/WaypointList

Waypoint[] waypoints
float32 duration
bool use_optimal_blending
================================================================================
MSG: kortex_driver/Waypoint

string name
Waypoint_type_of_waypoint oneof_type_of_waypoint
================================================================================
MSG: kortex_driver/Waypoint_type_of_waypoint

AngularWaypoint[] angular_waypoint
CartesianWaypoint[] cartesian_waypoint
================================================================================
MSG: kortex_driver/AngularWaypoint

float32[] angles
float32[] maximum_velocities
float32 duration
================================================================================
MSG: kortex_driver/CartesianWaypoint

Pose pose
uint32 reference_frame
float32 maximum_linear_velocity
float32 maximum_angular_velocity
float32 blending_radius
================================================================================
MSG: kortex_driver/Pose

float32 x
float32 y
float32 z
float32 theta_x
float32 theta_y
float32 theta_z"""
  __slots__ = ['input']
  _slot_types = ['kortex_driver/WaypointList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ValidateWaypointListRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.input is None:
        self.input = kortex_driver.msg.WaypointList()
    else:
      self.input = kortex_driver.msg.WaypointList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.input.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.input.waypoints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.oneof_type_of_waypoint
        length = len(_v1.angular_waypoint)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.angular_waypoint:
          length = len(val3.angles)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val3.angles))
          length = len(val3.maximum_velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val3.maximum_velocities))
          _x = val3.duration
          buff.write(_get_struct_f().pack(_x))
        length = len(_v1.cartesian_waypoint)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.cartesian_waypoint:
          _v2 = val3.pose
          _x = _v2
          buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
          _x = val3
          buff.write(_get_struct_I3f().pack(_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius))
      _x = self
      buff.write(_get_struct_fB().pack(_x.input.duration, _x.input.use_optimal_blending))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input is None:
        self.input = kortex_driver.msg.WaypointList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input.waypoints = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Waypoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v3 = val1.oneof_type_of_waypoint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v3.angular_waypoint = []
        for i in range(0, length):
          val3 = kortex_driver.msg.AngularWaypoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.angles = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.maximum_velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (val3.duration,) = _get_struct_f().unpack(str[start:end])
          _v3.angular_waypoint.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v3.cartesian_waypoint = []
        for i in range(0, length):
          val3 = kortex_driver.msg.CartesianWaypoint()
          _v4 = val3.pose
          _x = _v4
          start = end
          end += 24
          (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
          _x = val3
          start = end
          end += 16
          (_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius,) = _get_struct_I3f().unpack(str[start:end])
          _v3.cartesian_waypoint.append(val3)
        self.input.waypoints.append(val1)
      _x = self
      start = end
      end += 5
      (_x.input.duration, _x.input.use_optimal_blending,) = _get_struct_fB().unpack(str[start:end])
      self.input.use_optimal_blending = bool(self.input.use_optimal_blending)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.input.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.input.waypoints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = val1.oneof_type_of_waypoint
        length = len(_v5.angular_waypoint)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.angular_waypoint:
          length = len(val3.angles)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val3.angles.tostring())
          length = len(val3.maximum_velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val3.maximum_velocities.tostring())
          _x = val3.duration
          buff.write(_get_struct_f().pack(_x))
        length = len(_v5.cartesian_waypoint)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.cartesian_waypoint:
          _v6 = val3.pose
          _x = _v6
          buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
          _x = val3
          buff.write(_get_struct_I3f().pack(_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius))
      _x = self
      buff.write(_get_struct_fB().pack(_x.input.duration, _x.input.use_optimal_blending))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input is None:
        self.input = kortex_driver.msg.WaypointList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input.waypoints = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Waypoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v7 = val1.oneof_type_of_waypoint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v7.angular_waypoint = []
        for i in range(0, length):
          val3 = kortex_driver.msg.AngularWaypoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.angles = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.maximum_velocities = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (val3.duration,) = _get_struct_f().unpack(str[start:end])
          _v7.angular_waypoint.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v7.cartesian_waypoint = []
        for i in range(0, length):
          val3 = kortex_driver.msg.CartesianWaypoint()
          _v8 = val3.pose
          _x = _v8
          start = end
          end += 24
          (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
          _x = val3
          start = end
          end += 16
          (_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius,) = _get_struct_I3f().unpack(str[start:end])
          _v7.cartesian_waypoint.append(val3)
        self.input.waypoints.append(val1)
      _x = self
      start = end
      end += 5
      (_x.input.duration, _x.input.use_optimal_blending,) = _get_struct_fB().unpack(str[start:end])
      self.input.use_optimal_blending = bool(self.input.use_optimal_blending)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_I3f = None
def _get_struct_I3f():
    global _struct_I3f
    if _struct_I3f is None:
        _struct_I3f = struct.Struct("<I3f")
    return _struct_I3f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ValidateWaypointListResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ValidateWaypointListResponse(genpy.Message):
  _md5sum = "6ab2f9c51d3b9ba949e1dea76a321fca"
  _type = "kortex_driver/ValidateWaypointListResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """WaypointValidationReport output

================================================================================
MSG: kortex_driver/WaypointValidationReport

TrajectoryErrorReport trajectory_error_report
WaypointList optimal_waypoint_list
================================================================================
MSG: kortex_driver/TrajectoryErrorReport

TrajectoryErrorElement[] trajectory_error_elements
================================================================================
MSG: kortex_driver/TrajectoryErrorElement

uint32 error_type
uint32 error_identifier
float32 error_value
float32 min_value
float32 max_value
uint32 index
string message
uint32 waypoint_index
================================================================================
MSG: kortex_driver/WaypointList

Waypoint[] waypoints
float32 duration
bool use_optimal_blending
================================================================================
MSG: kortex_driver/Waypoint

string name
Waypoint_type_of_waypoint oneof_type_of_waypoint
================================================================================
MSG: kortex_driver/Waypoint_type_of_waypoint

AngularWaypoint[] angular_waypoint
CartesianWaypoint[] cartesian_waypoint
================================================================================
MSG: kortex_driver/AngularWaypoint

float32[] angles
float32[] maximum_velocities
float32 duration
================================================================================
MSG: kortex_driver/CartesianWaypoint

Pose pose
uint32 reference_frame
float32 maximum_linear_velocity
float32 maximum_angular_velocity
float32 blending_radius
================================================================================
MSG: kortex_driver/Pose

float32 x
float32 y
float32 z
float32 theta_x
float32 theta_y
float32 theta_z"""
  __slots__ = ['output']
  _slot_types = ['kortex_driver/WaypointValidationReport']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       output

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ValidateWaypointListResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.output is None:
        self.output = kortex_driver.msg.WaypointValidationReport()
    else:
      self.output = kortex_driver.msg.WaypointValidationReport()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.output.trajectory_error_report.trajectory_error_elements)
      buff.write(_struct_I.pack(length))
      for val1 in self.output.trajectory_error_report.trajectory_error_elements:
        _x = val1
        buff.write(_get_struct_2I3fI().pack(_x.error_type, _x.error_identifier, _x.error_value, _x.min_value, _x.max_value, _x.index))
        _x = val1.message
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.waypoint_index
        buff.write(_get_struct_I().pack(_x))
      length = len(self.output.optimal_waypoint_list.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.output.optimal_waypoint_list.waypoints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v9 = val1.oneof_type_of_waypoint
        length = len(_v9.angular_waypoint)
        buff.write(_struct_I.pack(length))
        for val3 in _v9.angular_waypoint:
          length = len(val3.angles)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val3.angles))
          length = len(val3.maximum_velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val3.maximum_velocities))
          _x = val3.duration
          buff.write(_get_struct_f().pack(_x))
        length = len(_v9.cartesian_waypoint)
        buff.write(_struct_I.pack(length))
        for val3 in _v9.cartesian_waypoint:
          _v10 = val3.pose
          _x = _v10
          buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
          _x = val3
          buff.write(_get_struct_I3f().pack(_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius))
      _x = self
      buff.write(_get_struct_fB().pack(_x.output.optimal_waypoint_list.duration, _x.output.optimal_waypoint_list.use_optimal_blending))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.output is None:
        self.output = kortex_driver.msg.WaypointValidationReport()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output.trajectory_error_report.trajectory_error_elements = []
      for i in range(0, length):
        val1 = kortex_driver.msg.TrajectoryErrorElement()
        _x = val1
        start = end
        end += 24
        (_x.error_type, _x.error_identifier, _x.error_value, _x.min_value, _x.max_value, _x.index,) = _get_struct_2I3fI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.message = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.message = str[start:end]
        start = end
        end += 4
        (val1.waypoint_index,) = _get_struct_I().unpack(str[start:end])
        self.output.trajectory_error_report.trajectory_error_elements.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output.optimal_waypoint_list.waypoints = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Waypoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v11 = val1.oneof_type_of_waypoint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v11.angular_waypoint = []
        for i in range(0, length):
          val3 = kortex_driver.msg.AngularWaypoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.angles = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.maximum_velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (val3.duration,) = _get_struct_f().unpack(str[start:end])
          _v11.angular_waypoint.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v11.cartesian_waypoint = []
        for i in range(0, length):
          val3 = kortex_driver.msg.CartesianWaypoint()
          _v12 = val3.pose
          _x = _v12
          start = end
          end += 24
          (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
          _x = val3
          start = end
          end += 16
          (_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius,) = _get_struct_I3f().unpack(str[start:end])
          _v11.cartesian_waypoint.append(val3)
        self.output.optimal_waypoint_list.waypoints.append(val1)
      _x = self
      start = end
      end += 5
      (_x.output.optimal_waypoint_list.duration, _x.output.optimal_waypoint_list.use_optimal_blending,) = _get_struct_fB().unpack(str[start:end])
      self.output.optimal_waypoint_list.use_optimal_blending = bool(self.output.optimal_waypoint_list.use_optimal_blending)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.output.trajectory_error_report.trajectory_error_elements)
      buff.write(_struct_I.pack(length))
      for val1 in self.output.trajectory_error_report.trajectory_error_elements:
        _x = val1
        buff.write(_get_struct_2I3fI().pack(_x.error_type, _x.error_identifier, _x.error_value, _x.min_value, _x.max_value, _x.index))
        _x = val1.message
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.waypoint_index
        buff.write(_get_struct_I().pack(_x))
      length = len(self.output.optimal_waypoint_list.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.output.optimal_waypoint_list.waypoints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = val1.oneof_type_of_waypoint
        length = len(_v13.angular_waypoint)
        buff.write(_struct_I.pack(length))
        for val3 in _v13.angular_waypoint:
          length = len(val3.angles)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val3.angles.tostring())
          length = len(val3.maximum_velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val3.maximum_velocities.tostring())
          _x = val3.duration
          buff.write(_get_struct_f().pack(_x))
        length = len(_v13.cartesian_waypoint)
        buff.write(_struct_I.pack(length))
        for val3 in _v13.cartesian_waypoint:
          _v14 = val3.pose
          _x = _v14
          buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
          _x = val3
          buff.write(_get_struct_I3f().pack(_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius))
      _x = self
      buff.write(_get_struct_fB().pack(_x.output.optimal_waypoint_list.duration, _x.output.optimal_waypoint_list.use_optimal_blending))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.output is None:
        self.output = kortex_driver.msg.WaypointValidationReport()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output.trajectory_error_report.trajectory_error_elements = []
      for i in range(0, length):
        val1 = kortex_driver.msg.TrajectoryErrorElement()
        _x = val1
        start = end
        end += 24
        (_x.error_type, _x.error_identifier, _x.error_value, _x.min_value, _x.max_value, _x.index,) = _get_struct_2I3fI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.message = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.message = str[start:end]
        start = end
        end += 4
        (val1.waypoint_index,) = _get_struct_I().unpack(str[start:end])
        self.output.trajectory_error_report.trajectory_error_elements.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output.optimal_waypoint_list.waypoints = []
      for i in range(0, length):
        val1 = kortex_driver.msg.Waypoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v15 = val1.oneof_type_of_waypoint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v15.angular_waypoint = []
        for i in range(0, length):
          val3 = kortex_driver.msg.AngularWaypoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.angles = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.maximum_velocities = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (val3.duration,) = _get_struct_f().unpack(str[start:end])
          _v15.angular_waypoint.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v15.cartesian_waypoint = []
        for i in range(0, length):
          val3 = kortex_driver.msg.CartesianWaypoint()
          _v16 = val3.pose
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
          _x = val3
          start = end
          end += 16
          (_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius,) = _get_struct_I3f().unpack(str[start:end])
          _v15.cartesian_waypoint.append(val3)
        self.output.optimal_waypoint_list.waypoints.append(val1)
      _x = self
      start = end
      end += 5
      (_x.output.optimal_waypoint_list.duration, _x.output.optimal_waypoint_list.use_optimal_blending,) = _get_struct_fB().unpack(str[start:end])
      self.output.optimal_waypoint_list.use_optimal_blending = bool(self.output.optimal_waypoint_list.use_optimal_blending)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I3fI = None
def _get_struct_2I3fI():
    global _struct_2I3fI
    if _struct_2I3fI is None:
        _struct_2I3fI = struct.Struct("<2I3fI")
    return _struct_2I3fI
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_I3f = None
def _get_struct_I3f():
    global _struct_I3f
    if _struct_I3f is None:
        _struct_I3f = struct.Struct("<I3f")
    return _struct_I3f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
class ValidateWaypointList(object):
  _type          = 'kortex_driver/ValidateWaypointList'
  _md5sum = '0b24f0cd37f005fabc6c65bffd727f77'
  _request_class  = ValidateWaypointListRequest
  _response_class = ValidateWaypointListResponse
