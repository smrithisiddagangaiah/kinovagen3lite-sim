# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/Waypoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class Waypoint(genpy.Message):
  _md5sum = "936edf0520133d6221befe691467b5ce"
  _type = "kortex_driver/Waypoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
string name
Waypoint_type_of_waypoint oneof_type_of_waypoint
================================================================================
MSG: kortex_driver/Waypoint_type_of_waypoint

AngularWaypoint[] angular_waypoint
CartesianWaypoint[] cartesian_waypoint
================================================================================
MSG: kortex_driver/AngularWaypoint

float32[] angles
float32[] maximum_velocities
float32 duration
================================================================================
MSG: kortex_driver/CartesianWaypoint

Pose pose
uint32 reference_frame
float32 maximum_linear_velocity
float32 maximum_angular_velocity
float32 blending_radius
================================================================================
MSG: kortex_driver/Pose

float32 x
float32 y
float32 z
float32 theta_x
float32 theta_y
float32 theta_z"""
  __slots__ = ['name','oneof_type_of_waypoint']
  _slot_types = ['string','kortex_driver/Waypoint_type_of_waypoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,oneof_type_of_waypoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Waypoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.oneof_type_of_waypoint is None:
        self.oneof_type_of_waypoint = kortex_driver.msg.Waypoint_type_of_waypoint()
    else:
      self.name = ''
      self.oneof_type_of_waypoint = kortex_driver.msg.Waypoint_type_of_waypoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.oneof_type_of_waypoint.angular_waypoint)
      buff.write(_struct_I.pack(length))
      for val1 in self.oneof_type_of_waypoint.angular_waypoint:
        length = len(val1.angles)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.angles))
        length = len(val1.maximum_velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.maximum_velocities))
        _x = val1.duration
        buff.write(_get_struct_f().pack(_x))
      length = len(self.oneof_type_of_waypoint.cartesian_waypoint)
      buff.write(_struct_I.pack(length))
      for val1 in self.oneof_type_of_waypoint.cartesian_waypoint:
        _v1 = val1.pose
        _x = _v1
        buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
        _x = val1
        buff.write(_get_struct_I3f().pack(_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.oneof_type_of_waypoint is None:
        self.oneof_type_of_waypoint = kortex_driver.msg.Waypoint_type_of_waypoint()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.oneof_type_of_waypoint.angular_waypoint = []
      for i in range(0, length):
        val1 = kortex_driver.msg.AngularWaypoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.angles = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.maximum_velocities = s.unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _get_struct_f().unpack(str[start:end])
        self.oneof_type_of_waypoint.angular_waypoint.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.oneof_type_of_waypoint.cartesian_waypoint = []
      for i in range(0, length):
        val1 = kortex_driver.msg.CartesianWaypoint()
        _v2 = val1.pose
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius,) = _get_struct_I3f().unpack(str[start:end])
        self.oneof_type_of_waypoint.cartesian_waypoint.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.oneof_type_of_waypoint.angular_waypoint)
      buff.write(_struct_I.pack(length))
      for val1 in self.oneof_type_of_waypoint.angular_waypoint:
        length = len(val1.angles)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.angles.tostring())
        length = len(val1.maximum_velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.maximum_velocities.tostring())
        _x = val1.duration
        buff.write(_get_struct_f().pack(_x))
      length = len(self.oneof_type_of_waypoint.cartesian_waypoint)
      buff.write(_struct_I.pack(length))
      for val1 in self.oneof_type_of_waypoint.cartesian_waypoint:
        _v3 = val1.pose
        _x = _v3
        buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z))
        _x = val1
        buff.write(_get_struct_I3f().pack(_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.oneof_type_of_waypoint is None:
        self.oneof_type_of_waypoint = kortex_driver.msg.Waypoint_type_of_waypoint()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.oneof_type_of_waypoint.angular_waypoint = []
      for i in range(0, length):
        val1 = kortex_driver.msg.AngularWaypoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.angles = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.maximum_velocities = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (val1.duration,) = _get_struct_f().unpack(str[start:end])
        self.oneof_type_of_waypoint.angular_waypoint.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.oneof_type_of_waypoint.cartesian_waypoint = []
      for i in range(0, length):
        val1 = kortex_driver.msg.CartesianWaypoint()
        _v4 = val1.pose
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.theta_x, _x.theta_y, _x.theta_z,) = _get_struct_6f().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.reference_frame, _x.maximum_linear_velocity, _x.maximum_angular_velocity, _x.blending_radius,) = _get_struct_I3f().unpack(str[start:end])
        self.oneof_type_of_waypoint.cartesian_waypoint.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_I3f = None
def _get_struct_I3f():
    global _struct_I3f
    if _struct_I3f is None:
        _struct_I3f = struct.Struct("<I3f")
    return _struct_I3f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
