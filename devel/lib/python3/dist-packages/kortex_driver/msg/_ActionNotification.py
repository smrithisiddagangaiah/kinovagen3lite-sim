# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kortex_driver/ActionNotification.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kortex_driver.msg

class ActionNotification(genpy.Message):
  _md5sum = "29e1bda02f9e209212ec0a8fc0b32300"
  _type = "kortex_driver/ActionNotification"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint32 action_event
ActionHandle handle
Timestamp timestamp
UserProfileHandle user_handle
uint32 abort_details
Connection connection
TrajectoryInfo[] trajectory_info
================================================================================
MSG: kortex_driver/ActionHandle

uint32 identifier
uint32 action_type
uint32 permission
================================================================================
MSG: kortex_driver/Timestamp

uint32 sec
uint32 usec
================================================================================
MSG: kortex_driver/UserProfileHandle

uint32 identifier
uint32 permission
================================================================================
MSG: kortex_driver/Connection

UserProfileHandle user_handle
string connection_information
uint32 connection_identifier
================================================================================
MSG: kortex_driver/TrajectoryInfo

uint32 trajectory_info_type
uint32 waypoint_index
uint32 joint_index"""
  __slots__ = ['action_event','handle','timestamp','user_handle','abort_details','connection','trajectory_info']
  _slot_types = ['uint32','kortex_driver/ActionHandle','kortex_driver/Timestamp','kortex_driver/UserProfileHandle','uint32','kortex_driver/Connection','kortex_driver/TrajectoryInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_event,handle,timestamp,user_handle,abort_details,connection,trajectory_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActionNotification, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_event is None:
        self.action_event = 0
      if self.handle is None:
        self.handle = kortex_driver.msg.ActionHandle()
      if self.timestamp is None:
        self.timestamp = kortex_driver.msg.Timestamp()
      if self.user_handle is None:
        self.user_handle = kortex_driver.msg.UserProfileHandle()
      if self.abort_details is None:
        self.abort_details = 0
      if self.connection is None:
        self.connection = kortex_driver.msg.Connection()
      if self.trajectory_info is None:
        self.trajectory_info = []
    else:
      self.action_event = 0
      self.handle = kortex_driver.msg.ActionHandle()
      self.timestamp = kortex_driver.msg.Timestamp()
      self.user_handle = kortex_driver.msg.UserProfileHandle()
      self.abort_details = 0
      self.connection = kortex_driver.msg.Connection()
      self.trajectory_info = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11I().pack(_x.action_event, _x.handle.identifier, _x.handle.action_type, _x.handle.permission, _x.timestamp.sec, _x.timestamp.usec, _x.user_handle.identifier, _x.user_handle.permission, _x.abort_details, _x.connection.user_handle.identifier, _x.connection.user_handle.permission))
      _x = self.connection.connection_information
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.connection.connection_identifier
      buff.write(_get_struct_I().pack(_x))
      length = len(self.trajectory_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_info:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.trajectory_info_type, _x.waypoint_index, _x.joint_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.handle is None:
        self.handle = kortex_driver.msg.ActionHandle()
      if self.timestamp is None:
        self.timestamp = kortex_driver.msg.Timestamp()
      if self.user_handle is None:
        self.user_handle = kortex_driver.msg.UserProfileHandle()
      if self.connection is None:
        self.connection = kortex_driver.msg.Connection()
      if self.trajectory_info is None:
        self.trajectory_info = None
      end = 0
      _x = self
      start = end
      end += 44
      (_x.action_event, _x.handle.identifier, _x.handle.action_type, _x.handle.permission, _x.timestamp.sec, _x.timestamp.usec, _x.user_handle.identifier, _x.user_handle.permission, _x.abort_details, _x.connection.user_handle.identifier, _x.connection.user_handle.permission,) = _get_struct_11I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.connection.connection_information = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.connection.connection_information = str[start:end]
      start = end
      end += 4
      (self.connection.connection_identifier,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_info = []
      for i in range(0, length):
        val1 = kortex_driver.msg.TrajectoryInfo()
        _x = val1
        start = end
        end += 12
        (_x.trajectory_info_type, _x.waypoint_index, _x.joint_index,) = _get_struct_3I().unpack(str[start:end])
        self.trajectory_info.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11I().pack(_x.action_event, _x.handle.identifier, _x.handle.action_type, _x.handle.permission, _x.timestamp.sec, _x.timestamp.usec, _x.user_handle.identifier, _x.user_handle.permission, _x.abort_details, _x.connection.user_handle.identifier, _x.connection.user_handle.permission))
      _x = self.connection.connection_information
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.connection.connection_identifier
      buff.write(_get_struct_I().pack(_x))
      length = len(self.trajectory_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_info:
        _x = val1
        buff.write(_get_struct_3I().pack(_x.trajectory_info_type, _x.waypoint_index, _x.joint_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.handle is None:
        self.handle = kortex_driver.msg.ActionHandle()
      if self.timestamp is None:
        self.timestamp = kortex_driver.msg.Timestamp()
      if self.user_handle is None:
        self.user_handle = kortex_driver.msg.UserProfileHandle()
      if self.connection is None:
        self.connection = kortex_driver.msg.Connection()
      if self.trajectory_info is None:
        self.trajectory_info = None
      end = 0
      _x = self
      start = end
      end += 44
      (_x.action_event, _x.handle.identifier, _x.handle.action_type, _x.handle.permission, _x.timestamp.sec, _x.timestamp.usec, _x.user_handle.identifier, _x.user_handle.permission, _x.abort_details, _x.connection.user_handle.identifier, _x.connection.user_handle.permission,) = _get_struct_11I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.connection.connection_information = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.connection.connection_information = str[start:end]
      start = end
      end += 4
      (self.connection.connection_identifier,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_info = []
      for i in range(0, length):
        val1 = kortex_driver.msg.TrajectoryInfo()
        _x = val1
        start = end
        end += 12
        (_x.trajectory_info_type, _x.waypoint_index, _x.joint_index,) = _get_struct_3I().unpack(str[start:end])
        self.trajectory_info.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11I = None
def _get_struct_11I():
    global _struct_11I
    if _struct_11I is None:
        _struct_11I = struct.Struct("<11I")
    return _struct_11I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
