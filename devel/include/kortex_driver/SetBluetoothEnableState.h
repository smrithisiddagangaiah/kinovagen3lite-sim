// Generated by gencpp from file kortex_driver/SetBluetoothEnableState.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_SETBLUETOOTHENABLESTATE_H
#define KORTEX_DRIVER_MESSAGE_SETBLUETOOTHENABLESTATE_H

#include <ros/service_traits.h>


#include <kortex_driver/SetBluetoothEnableStateRequest.h>
#include <kortex_driver/SetBluetoothEnableStateResponse.h>


namespace kortex_driver
{

struct SetBluetoothEnableState
{

typedef SetBluetoothEnableStateRequest Request;
typedef SetBluetoothEnableStateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct SetBluetoothEnableState
} // namespace kortex_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::kortex_driver::SetBluetoothEnableState > {
  static const char* value()
  {
    return "7ccd6a6c56b1642433541444d0e2ab2f";
  }

  static const char* value(const ::kortex_driver::SetBluetoothEnableState&) { return value(); }
};

template<>
struct DataType< ::kortex_driver::SetBluetoothEnableState > {
  static const char* value()
  {
    return "kortex_driver/SetBluetoothEnableState";
  }

  static const char* value(const ::kortex_driver::SetBluetoothEnableState&) { return value(); }
};


// service_traits::MD5Sum< ::kortex_driver::SetBluetoothEnableStateRequest> should match
// service_traits::MD5Sum< ::kortex_driver::SetBluetoothEnableState >
template<>
struct MD5Sum< ::kortex_driver::SetBluetoothEnableStateRequest>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetBluetoothEnableState >::value();
  }
  static const char* value(const ::kortex_driver::SetBluetoothEnableStateRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetBluetoothEnableStateRequest> should match
// service_traits::DataType< ::kortex_driver::SetBluetoothEnableState >
template<>
struct DataType< ::kortex_driver::SetBluetoothEnableStateRequest>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetBluetoothEnableState >::value();
  }
  static const char* value(const ::kortex_driver::SetBluetoothEnableStateRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::kortex_driver::SetBluetoothEnableStateResponse> should match
// service_traits::MD5Sum< ::kortex_driver::SetBluetoothEnableState >
template<>
struct MD5Sum< ::kortex_driver::SetBluetoothEnableStateResponse>
{
  static const char* value()
  {
    return MD5Sum< ::kortex_driver::SetBluetoothEnableState >::value();
  }
  static const char* value(const ::kortex_driver::SetBluetoothEnableStateResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::kortex_driver::SetBluetoothEnableStateResponse> should match
// service_traits::DataType< ::kortex_driver::SetBluetoothEnableState >
template<>
struct DataType< ::kortex_driver::SetBluetoothEnableStateResponse>
{
  static const char* value()
  {
    return DataType< ::kortex_driver::SetBluetoothEnableState >::value();
  }
  static const char* value(const ::kortex_driver::SetBluetoothEnableStateResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_SETBLUETOOTHENABLESTATE_H
